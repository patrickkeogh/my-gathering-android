package com.programming.kantech.mygathering.view.activities;

import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.CursorLoader;
import android.support.v4.content.Loader;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.widget.CursorAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import com.programming.kantech.mygathering.R;
import com.programming.kantech.mygathering.data.model.mongo.Banner;
import com.programming.kantech.mygathering.data.model.mongo.Gathering;
import com.programming.kantech.mygathering.data.model.mongo.GatheringTopic;
import com.programming.kantech.mygathering.data.model.mongo.GatheringType;
import com.programming.kantech.mygathering.data.model.mongo.Location;
import com.programming.kantech.mygathering.data.model.pojo.Gathering_Pojo;
import com.programming.kantech.mygathering.provider.Contract_MyGathering;
import com.programming.kantech.mygathering.utils.Constants;
import com.squareup.picasso.Picasso;

import java.util.List;

/**
 * Created by patrick keogh on 2017-05-18.
 */

public class Activity_Gathering_Details extends AppCompatActivity implements LoaderManager.LoaderCallbacks<Cursor> {

    /* Fields to store our TextViews */
    private TextView mName;
    private TextView mDescription;
    private TextView mType;
    private TextView mTopic;

    private TextView mLocation;
    private TextView mCity;
    private TextView mCountry;


    private ImageView mBanner;

    /* The URI that is used to access the chosen gathering's details */
    private Uri mUri;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_gathering_details);

        // Set the action bar back button to look like an up button
        ActionBar actionBar = this.getSupportActionBar();
        if (actionBar != null) {
            actionBar.setDisplayHomeAsUpEnabled(true);
        }

        /* Typical usage of findViewById... */
        mName = (TextView) findViewById(R.id.tv_gathering_name);

        mLocation = (TextView) findViewById(R.id.tv_gathering_location);
        mCity = (TextView) findViewById(R.id.tv_gathering_city);
        mCountry = (TextView) findViewById(R.id.tv_gathering_country);

        mDescription = (TextView) findViewById(R.id.tv_gathering_description);
        mType = (TextView) findViewById(R.id.tv_gathering_type);
        mTopic = (TextView) findViewById(R.id.tv_gathering_topic);
        mBanner = (ImageView) findViewById(R.id.iv_gathering_banner);

        /*
         * The getData method will give us the uri passed in from the Main Activity.
         */
        mUri = getIntent().getData();

        if (mUri == null) throw new NullPointerException("URI for Deatils Activity cannot be null");

        getSupportLoaderManager().initLoader(Constants.GATHERING_DETAIL_LOADER, null, this);


    }

    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param loaderId   The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @Override
    public Loader<Cursor> onCreateLoader(int loaderId, Bundle args) {

        Log.i(Constants.TAG, "onCreateLoader() called in Details");

        switch (loaderId) {
            case Constants.GATHERING_DETAIL_LOADER:

                Log.i(Constants.TAG, "mUri to use:" + mUri);

                return new CursorLoader(this,
                        mUri,
                        Constants.LOADER_GATHERING_DETAIL_COLUMNS,
                        null,
                        null,
                        null);
            default:
                throw new RuntimeException("Loader Not Implemented: " + loaderId);
        }
    }

    /**
     * @param loader The Loader that has finished.
     * @param data   The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {

        Log.i(Constants.TAG, "onLoadFinished() called in Details");

        /*
+         * Before we bind the data to the UI that will display that data, we need to check the
+         * cursor to make sure we have the results that we are expecting. In order to do that, we
+         * check to make sure the cursor is not null and then we call moveToFirst on the cursor.
+         * Although it may not seem obvious at first, moveToFirst will return true if it contains
+         * a valid first row of data.
+         *
+         * If we have valid data, we want to continue on to bind that data to the UI. If we don't
+         * have any data to bind, we just return from this method.
+         */
        boolean cursorHasValidData = false;


        if (data != null && data.moveToFirst()) {
            Log.i(Constants.TAG, "We have good data");
            /* We have valid data, continue on to bind the data to the UI */
            cursorHasValidData = true;
        }

        if (!cursorHasValidData) {
            /* No data to display, simply return and do nothing */
            Log.i(Constants.TAG, "No data to display");
            return;
        }

        /* Read date from the cursor */
        Gathering_Pojo gathering = Contract_MyGathering.GatheringEntry.getGatheringFromCursor(data);

        Log.i(Constants.TAG, "Gathering Returned in Details cursor:" + gathering.toString());

        mName.setText(gathering.getName());
        mDescription.setText(gathering.getDescription());

        String banner_url = gathering.getBanner_url();

        mLocation.setText(gathering.getLocation_name());

        mCity.setText(gathering.getLocation_city() + ", " + gathering.getLocation_prov());
        mCountry.setText(gathering.getLocation_country());

        mType.setText(gathering.getType());
        mTopic.setText(gathering.getTopic());

        Picasso.with(this).setLoggingEnabled(true);
        if (banner_url == "null") {

            Picasso.with(this)
                    .load(R.drawable.blank)
                    .placeholder(R.drawable.blank)
                    .error(R.drawable.circle)
                    .into(mBanner);


        } else {
            Log.d(Constants.TAG, "Banner:" + banner_url);

            Picasso.with(this)
                    .load(banner_url)
                    .placeholder(R.drawable.blank)
                    .into(mBanner);
        }

    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<Cursor> loader) {

    }
}
